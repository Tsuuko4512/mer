#
# 取引終了済み商品の商品IDを取得して削除（GUI）
# wxpython,requestsのインストールが必要
#
#
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.8.0b1 on Wed Jan 24 05:00:17 2018
#

import wx
import requests,string,json
import time

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

##################！！！書き換える！！！##################
_access_token=""
_global_access_token=""
seller_id=""
########################################################
#
class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.run_Btn = wx.Button(self, wx.ID_ANY, "削除実行", style=wx.BU_BOTTOM | wx.BU_TOP)
        self.copy_Btn = wx.Button(self, wx.ID_ANY, "商品ID取得", style=wx.BU_BOTTOM | wx.BU_TOP)
        self.clear_Btn = wx.Button(self, wx.ID_ANY, "Clear", style=wx.BU_BOTTOM | wx.BU_TOP)
        self.itemID = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_MULTILINE)
        self.result_box = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_MULTILINE)
        self.result_box.Disable()
        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        ####
        self.Bind(wx.EVT_BUTTON, self.run, self.run_Btn)
        self.Bind(wx.EVT_BUTTON, self.id_get, self.copy_Btn)
        self.Bind(wx.EVT_BUTTON, self.clear, self.clear_Btn)
        ####
        #self.itemID.SetValue('text_1')

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("メルカリ　販売済み商品削除")
        self.run_Btn.SetMinSize((150, 40))
        self.copy_Btn.SetMinSize((150, 40))
        self.clear_Btn.SetMinSize((100, 40))
        self.itemID.SetMinSize((400, 200))
        self.result_box.SetMinSize((400, 200))
        self.itemID.SetToolTip("")
        self.result_box.SetToolTip("")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_7 = wx.BoxSizer(wx.VERTICAL)
        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        label_1 = wx.StaticText(self, wx.ID_ANY, "\n販売から2週間経過した商品を削除できます。\nそれ以外はエラーとなります。", style=wx.ST_NO_AUTORESIZE)
        label_1.SetMinSize((400, 50))
        sizer_7.Add(label_1, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.EXPAND, 5)
        sizer_9.Add(self.run_Btn, 0, 0, 0)
        sizer_9.Add(self.copy_Btn, 0, 0, 0)
        sizer_9.Add(self.clear_Btn, 0, 0, 0)
        sizer_7.Add(sizer_9, 0, wx.EXPAND, 0)
        sizer_7.Add(self.itemID, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.EXPAND, 5)
        sizer_7.Add(self.result_box, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.EXPAND, 5)
        sizer_6.Add(sizer_7, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_6)
        self.Layout()
        self.SetSize((400, 600))
        # end wxGlade

    def run(self, event):  # 実行
        if(len(self.itemID.GetValue())==0):
            print(err_no_text)
            self.result_box.AppendText(err_no_text)
            return 1
        if(len(_access_token)!=40):
            print(err_access_token)
            self.result_box.AppendText(err_access_token)
            return 1
        self.itemID.Disable()
        self.delete(self.itemID)
        self.itemID.Enable()

    def id_get(self, event):  # 商品ID取得
        self.itemID.Clear()
        if(len(_access_token)!=40):
            print(err_access_token)
            self.result_box.AppendText(err_access_token)
            return 1
        headers = {"Content-Type":"application/json","User-Agent": "Mercari_r/4724 (iOS 10.3.1; ja-JP; iPhone9,2)","X-PLATFORM":"ios","X-APP-VERSION": "4724"}
        payload = {"_access_token":_access_token,"_global_access_token":_global_access_token,"seller_id":seller_id,"status":"sold_out","limit":"100"}
        r=requests.get("https://api.mercari.jp/items/get_items",params=payload,headers=headers).json()
        id_list=[]
        try:
            for i,chk in enumerate(r["data"]):
                for key,value in r["data"][i].items():
                    if(key=="id"):
                        id_list.append(value)
        except:
            print(err_response,r)
            self.result_box.AppendText(err_response)
            self.result_box.AppendText("\n\n")
            return 1
        id_list.reverse()
        for text in id_list:            
            self.itemID.AppendText(text)
            self.itemID.AppendText("\n")
        self.result_box.AppendText("取得完了\n\n")

    
    def clear(self, event):  #クリア
        self.itemID.Clear()
        self.result_box.Clear()    

    def delete(self,itemID):
        itemID=itemID.GetValue().rstrip('\r\n').split('\n')
        self.result_box.Clear()
        for item in itemID:
            headers = {"Content-Type":"application/json"}
            payload={"item_id":item,"_app_version":"4724","_platform":"ios","t":"1516956892","_access_token":_access_token,"User-Agent":"Mercari_r/600 (Android 23; ja; arm64-v8a,; samsung SC-02H Build/6.0.1)"}
            r=requests.post("https://api.mercari.jp/items/dismiss", params=payload,headers=headers).json()
            try:print(item," : "+r["result"])
            except:
                print(err_response,r)
                self.result_box.AppendText(err_response)
                self.result_box.AppendText(r)
                self.result_box.AppendText("\n\n")
                return 1
            self.result_box.AppendText(item)
            self.result_box.AppendText(" : ")
            self.result_box.AppendText(r["result"])
            self.result_box.AppendText("\n")
            time.sleep(3)
        self.result_box.AppendText("\nFinish!\n\n")

#err
err_access_token="Error! _access_tokenが正しく設定されていません。\nスクリプトファイルを開き、書き換えてください。\n\n"
err_no_text="Error! テキストが入力されていません。\n\n"
err_response="Error! Response：\n"
##
# # end of class MyFrame

if __name__ == "__main__":
    app = wx.App()
    frame = MyFrame(None, wx.ID_ANY, "")
    app.SetTopWindow(frame)
    frame.Show()
    app.MainLoop()

